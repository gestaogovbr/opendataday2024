name: Build and deploy site

on:
  push:
    branches:
      - main

jobs:

  build:
    runs-on: ubuntu-latest
    name: Build site with Jekyll and JupyterLite
    steps:
      # Check out from Git
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Use cached Python dependencies if present (they do not change as often)
      - name: Check Python dependencies cache
        id: python-dependencies-cache
        uses: actions/cache/restore@v4
        with:
          path: /usr/lib/python3/dist-packages
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      # Install Jupyter and any other Python packages defined in requirements.txt
      - name: Install Python dependencies
        if: steps.python-dependencies-cache.outputs.cache-hit != 'true'
        working-directory: jupyterlite
        run: |
          python -m pip install -r requirements.txt

      # Save Python dependencies in cache
      - name: Store Python dependencies cache
        uses: actions/cache/save@v4
        with:
          path: /usr/lib/python3/dist-packages
          key: ${{ steps.python-dependencies-cache.outputs.cache-primary-key }}

      # Build the main part of the site using Jekyll Docker image
      - name: Build the main site with Jekyll
        working-directory: public
        run: |
          docker run \
          -v ${{ github.workspace }}/public:/srv/jekyll -v ${{ github.workspace }}/_site:/srv/jekyll/_site \
          jekyll/builder:latest /bin/bash -c "chmod -R 777 /srv/jekyll && jekyll build --future"

      # Build the lab part of the site using JupyterLab
      - name: Build the lab site with JupyterLite
        working-directory: jupyterlite
        run: |
          mkdir ../_site/notebooks/
          jupyter lite build --contents notebooks --output-dir ../_site/notebooks

      # Ready and upload artifact for deployment
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # or specific "vX.X.X" version tag for this action
